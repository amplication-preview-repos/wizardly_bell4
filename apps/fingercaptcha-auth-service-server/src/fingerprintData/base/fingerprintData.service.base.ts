/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FingerprintData as PrismaFingerprintData,
} from "@prisma/client";

export class FingerprintDataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FingerprintDataCountArgs, "select">
  ): Promise<number> {
    return this.prisma.fingerprintData.count(args);
  }

  async fingerprintDataItems(
    args: Prisma.FingerprintDataFindManyArgs
  ): Promise<PrismaFingerprintData[]> {
    return this.prisma.fingerprintData.findMany(args);
  }
  async fingerprintData(
    args: Prisma.FingerprintDataFindUniqueArgs
  ): Promise<PrismaFingerprintData | null> {
    return this.prisma.fingerprintData.findUnique(args);
  }
  async createFingerprintData(
    args: Prisma.FingerprintDataCreateArgs
  ): Promise<PrismaFingerprintData> {
    return this.prisma.fingerprintData.create(args);
  }
  async updateFingerprintData(
    args: Prisma.FingerprintDataUpdateArgs
  ): Promise<PrismaFingerprintData> {
    return this.prisma.fingerprintData.update(args);
  }
  async deleteFingerprintData(
    args: Prisma.FingerprintDataDeleteArgs
  ): Promise<PrismaFingerprintData> {
    return this.prisma.fingerprintData.delete(args);
  }
}
